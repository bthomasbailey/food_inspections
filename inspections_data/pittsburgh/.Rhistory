file.path("inspections_pt2", "inspection_level",
str_c(id_inspection, ".csv"))
)
write_csv(violation_level_output,
file.path("inspections_pt2", "violation_level",
str_c(id_inspection, ".csv"))
)
}
scrape_inspection_report(id_inspection, id_facility, date, type)
getwd()
source('C:/MyGitRepos/food_inspections/inspections_data/champaign-urbana/scrape_inspection_report.R')
inspections %>% filter(row_number() == 1283)
inspections1283 <- inspections %>% filter(row_number() >= 1283)
invisible(mapply(scrape_inspection_report,
inspections1283$id_inspection,
inspections1283$id_facility,
inspections1283$date,
inspections1283$type,
SIMPLIFY = F)
)
files <- list.files("inspections_pt2//inspection_level", full.names = T)
files
files_inspections <- list.files("inspections_pt2//inspection_level", full.names = T)
files_violations <- list.files("inspections_pt2//violation_level", full.names = T)
files_violations
lapply(files_inspections[1:10], read_csv)
lapply(files_violations[1:10], read_csv)
lapply(files_inspections[1:10], read_csv)
lapply(files_inspections[1:10], invisible(read_csv))
lapply(files_inspections[1:10], read_csv)
bind_rows(lapply(files_inspections[1:10], read_csv))
library(XML)
library(tidyverse)
library(stringr)
library(httr)
files_inspections <- list.files("inspections_pt2//inspection_level", full.names = T)
files_violations <- list.files("inspections_pt2//violation_level", full.names = T)
all_inspections <- bind_rows(lapply(files_inspections, read_csv))
all_inspections <- bind_rows(lapply(files_inspections[1:100], read_csv))
View(all_inspections)
all_inspections <- bind_rows(lapply(files_inspections[1:1000], read_csv))
View(all_inspections)
all_violations <- bind_rows(lapply(files_violations[1:1000], read_csv))
all_violations <- bind_rows(lapply(files_violations[1:100], read_csv))
all_violations <- bind_rows(lapply(files_violations[1:50], read_csv))
View(all_violations)
library(XML)
library(tidyverse)
library(stringr)
library(httr)
list_inspections <- lapply(files_inspections[1:2000], read_csv)
files_inspections <- list.files("inspections_pt2//inspection_level", full.names = T)
files_inspections
files_violations <- list.files("inspections_pt2//violation_level", full.names = T)
list_inspections <- lapply(files_inspections[1:2000], read_csv)
list_inspections[[1]]
list_inspections[[1]]$comments
class(list_inspections[[1]]$comments)
sapply(list_inspections, function(x) print(class(x$comments)))
sapply(list_inspections, function(x) print(class(x[["comments"]])))
sapply(list_inspections, function(x) if (class(x$comments) != "character") print(x))
for (df in list_inspections) {
print (df)
}
for (df in list_inspections) {
print (class(df$comments))
}
for (df in list_inspections) {
if (class(df$comments) != "character") {
print (x)
}
}
for (df in list_inspections) {
if (class(df$comments) != "character") {
print (df)
}
}
base_url <- "http://il.healthinspections.us/_templates/90/"
base_url <- str_c(base_url, "Food_Establishment_Inspection/_report_full.cfm")
id_inspection <- 148730
url <- modify_url(base_url,
query = list(inspectionID = id_inspection,
domainID = 90,
publicSite= "yes")
)
url
?read_csv
list_inspections <- lapply(files_inspections[1:2000],
read_csv,
col_types = cols(.default = "i",
date = "D",
type = "c",
comments = "c")
)
for (df in list_inspections) {
if (class(df$comments) != "character") {
print (df)
}
}
list_inspections <- lapply(files_inspections,
read_csv,
col_types = cols(.default = "i",
date = "D",
type = "c",
comments = "c")
)
for (df in list_inspections) {
if (class(df$comments) != "character") {
print (df)
}
}
list_inspections[[1]]
all_inspections <- bind_rows(list_inspections)
View(all_inspections)
files_violations <- lapply(files_violations[1:100],
read_csv)
files_violations[[1]]
View(files_violations[[1]])
files_violations <- lapply(files_violations[1:100],
read_csv,
col_types = cols(.default = "c",
id_inspection = "i",
item = "i",
wt = "i")
)
files_violations
files_violations <- list.files("inspections_pt2//violation_level", full.names = T)
list_violations <- lapply(files_violations[1:100],
read_csv,
col_types = cols(.default = "c",
id_inspection = "i",
item = "i",
wt = "i")
)
list_violations <- lapply(files_violations,
read_csv,
col_types = cols(.default = "c",
id_inspection = "i",
item = "i",
wt = "i")
)
all_violations <- bind_rows(list_violations)
View(all_violations)
View(all_violations %>% filter(id_inspection == 36841))
# delete individual CSV files
file.remove(files_inspections)
file.remove(files_violations)
# Write CSV
write_csv(all_inspections, "inspections.csv")
write_csv(all_violations, "violations.csv")
install.packages("pdftools")
setwd("C:/MyGitRepos/food_inspections/inspections_data/pittsburgh")
library(pdftools)
list.files()
pdf_text("rwservlet.pdf")
test <- pdf_text("rwservlet.pdf")
test[[1]]
cat(test[[1]])
?cat
doc <- pdf_text("rwservlet.pdf")
pg1 <- doc[[1]]
pg1 <- doc[[1]]
pg2 <- doc[[2]]
pg3 <- doc[[3]]
pg1
grep("\\n", pg1)
pg1_split <- str_split(pg1, "\\n")
library(stringr)
pg1_split <- str_split(pg1, "\\n")
pg1_split
pg1_split <- unlist(str_split(pg1, "\\n"))
pg1_split
grep("client name:", pg1_split)
grep("client name:", pg1_split, ignore.case = T)
nbr_line <- grep("client name:", pg1_split, ignore.case = T)
nbr_line
line <- pg1_split(nbr_line)
line <- pg1_split[nbr_line]
line
str_match("client name:(.+)\\r", line)
?str_match
str_match(line, "client name:(.+)\\r")
str_match(line, "Client name:(.+)\\r")
str_match(line, "Client Name:(.+)\\r")
str_match(line, "Client Name:\\s*(.+)\\r")
client_name <- str_match(line, "Client Name:\\s*(.+)\\r")[1,2]
client_name
pg1_split
grep("Address:", pg1_split)
nbr_line <- grep("Address:", pg1_split)
line <- pg1_split[nbr_line]
line
str_match(line, "Address:\\s*(.+)Inspection Date:")
address <- str_match(line, "Address:\\s*(.+)Inspection Date:")[1,2]
address
address <- str_trim(address)
address
address
pg1_split
nbr_line <- grep("Inspection Date:", pg1_split)
line <- pg1_split[nbr_line]
line
grep("[^Re-] Inspection Date:", pg1_split)
grep("[^Re-]Inspection Date:", pg1_split)
grep("(^Re-)Inspection Date:", pg1_split)
grep("^(?<=\\.)Inspection Date:", pg1_split)
grep("(?<=\\.)Inspection Date:", pg1_split)
grep("(?<=\\.)Inspection Date:", pg1_split, perl = T)
grep("(?!\\.)Inspection Date:", pg1_split, perl = T)
grep("(?!Re-)Inspection Date:", pg1_split, perl = T)
grep("(?!Re-\\s*)Inspection Date:", pg1_split, perl = T)
grep("-", "test0-12")
grep("^(?!Re-\\s*)Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("^(?!Re\\s*)Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?!Re\\s*)Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?!Re)Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?!Re - )Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?!Re)Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?<!Re)Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?<!Re- )Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?<!Re-\\s*)Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?<!Re-\\s)Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?<!Re-)Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?<!Re-)\\s*Inspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
grep("(?<!Re-)\\sInspection Date:", pg1_split, perl = T)
# grep("^(?!Camera1).*\\.png
nbr_line <-  grep("(?<!Re-)\\sInspection Date:", pg1_split, perl = T)
line <- pg1_split[nbr_line]
line
line
str_match(line, "Inspection Date:\\s*(.+)\\r")
str_match(line, "Inspection Date:\\s*(.+)\\r")[1,2]
nbr_line <-  grep("City:", pg1_split)
nbr_line
line <- pg1_split[nbr_line]
line
str_match(line, "City:\\s*(.+)State:")
str_match(line, "City:\\s*(.+)\\sState:")
str_match(line, "City:\\s*(.+)\\s+State:")
str_match(line, "City:\\s*(.+)State:")
str_match(line, "City:\\s*(.+)State:")[1,2]
city <- str_match(line, "City:\\s*(.+)State:")[1,2]
city
city <- str_trim(city)
city
pg1_split
grep("State:", pg1_split)
nbr_line <-  grep("State:", pg1_split)
line <- pg1_split[nbr_line]
line
str_match(line, "State:\\s*(.+)Zip:")
str_match(line, "State:\\s*(.+)Zip:")[1,2]
state <- str_match(line, "State:\\s*(.+)Zip:")[1,2]
state <- str_trim(state)
pg1_split
nbr_line <-  grep("Zip:", pg1_split)
nbr_line
line <- pg1_split[nbr_line]
line
str_match(line, "Zip:\\s*(.+)Purpose:")
str_match(line, "Zip:\\s*(.+)Purpose:")[1,2]
zip <- str_match(line, "Zip:\\s*(.+)Purpose:")[1,2]
zip <- str_trim(zip)
pg1_split
nbr_line <-  grep("Purpose:", pg1_split)
nbr_line
line <- pg1_split[nbr_line]
line
str_match(line, "Purpose:\\s*(.+)\\r")
str_match(line, "Purpose:\\s*(.+)\\r")[1,2]
purpose <- str_match(line, "Purpose:\\s*(.+)\\r")[1,2]
purpose <- str_trim(purpose)
purpose
pg1_split
?str_c
str_c("one", "two")
extract_value <- function(key, trailing_key, perl) {
nbr_line <- grep(key, pg1_split, perl = perl)
line <- pg1_split[nbr_line]
pattern <- str_c(key, "(.+)", trailing_key)
value <- str_match(line, "Client Name:\\s*(.+)\\r")[1,2]
str_trim(value)
}
extract_value("Client Name:", "\\r", F)
extract_value <- function(key, trailing_key, perl) {
nbr_line <- grep(key, pg1_split, perl = perl)
line <- pg1_split[nbr_line]
pattern <- str_c(key, "(.+)", trailing_key)
value <- str_match(line, pattern)[1,2]
str_trim(value)
}
extract_value("Client Name:", "\\r", F)
extract_value <- function(key, trailing_key, perl) {
nbr_line <- grep(key, pg1_split, perl = perl)
line <- pg1_split[nbr_line]
pattern <- str_c(key, "\\s*(.+)", trailing_key)
value <- str_match(line, pattern)[1,2]
str_trim(value)
}
extract_value("Client Name:", "\\r", F)
client_name <- extract_value("Client Name:", "\\r", F)
extract_value("Address:", "Inspection Date:", F)
address <- extract_value("Address:", "Inspection Date:", F)
address
library(lubridate)
extract_value("Inspection Date:", "\\r", F)
mdy(extract_value("Inspection Date:", "\\r", F))
dt_inspection <- mdy(extract_value("Inspection Date:", "\\r", F))
dt_inspection
extract_value("City:", "State:", F)
extract_value("State:", "Zip:", F)
state <- extract_value("State:", "Zip:", F)
extract_value("Zip:", "Purpose:", F)
zip <- extract_value("Zip:", "Purpose:", F)
extract_value("Purpose:", "\\r", F)
purpose <- extract_value("Purpose:", "\\r", F)
pg1_split
dt_inspection
dt_inspection <- mdy(extract_value("(?<!Re-)\\sInspection Date:", "\\r", F))
dt_inspection <- mdy(extract_value("(?<!Re-)\\sInspection Date:", "\\r", T))
dt_inspection
key <- "(?<!Re-)\\sInspection Date:"
trailing_key <- "\\r"
perl <- TRUE
nbr_line <- grep(key, pg1_split, perl = perl)
nbr_line
line <- pg1_split[nbr_line]
line
pattern <- str_c(key, "\\s*(.+)", trailing_key)
pattern
value <- str_match(line, pattern)[1,2]
value
str_trim(value)
pg1_split
extract_value("Municipality:", "Inspector", F)
municipality <- extract_value("Municipality:", "Inspector", F)
municipality
municipality <- extract_value("Municipality:", "Inspector:", F)
municipality
inspector <- extract_value("Inspector:", "Permit Exp. Date:", F)
inspector
extract_value <- function(key, trailing_key, perl) {
nbr_line <- grep(key, pg1_split, perl = perl)
line <- pg1_split[nbr_line]
pattern <- str_c(key, "\\s*(.+)", trailing_key)
value <- str_match(line, pattern)[1,2]
value <- gsub("\\s+", " ", value)
str_trim(value)
}
client_name <- extract_value("Client Name:", "\\r", F)
client_name
address <- extract_value("Address:", "Inspection Date:", F)
address
dt_inspection <- mdy(extract_value("(?<!Re-)\\sInspection Date:", "\\r", T))
dt_inspection
city <- extract_value("City:", "State:", F)
city
state <- extract_value("State:", "Zip:", F)
state
zip <- extract_value("Zip:", "Purpose:", F)
zip
purpose <- extract_value("Purpose:", "\\r", F)
purpose
municipality <- extract_value("Municipality:", "Inspector:", F)
municipality
inspector <- extract_value("Inspector:", "Permit Exp. Date:", F)
inspector
pg1_split
inspector <- mdy(extract_value("Permit Exp. Date:", "\\r", F))
inspector <- extract_value("Inspector:", "Permit Exp. Date:", F)
dt_permit_exp <- mdy(extract_value("Permit Exp. Date:", "\\r", F))
dt_permit_exp
cat_code <- extract_value("Category Code:", "Priority Code:", F)
cat_code
dt_re_inspection <- extract_value("Re\\s*-\\s*Inspection:", "Re\\s*-\\s*Inspection Date:", F)
dt_re_inspection
dt_re_inspection <- mdy(extract_value("Re\\s*-\\s*Inspection:", "Re\\s*-\\s*Inspection Date:", F))
dt_re_inspection
re_inspection <- extract_value("Re\\s*-\\s*Inspection:", "Re\\s*-\\s*Inspection Date:", F)
re_inspection
dt_re_inspection <- extract_value("Re\\s*-\\s*Inspection Date:", "\\r", F)
dt_re_inspection
dt_re_inspection <- mdy(extract_value("Re\\s*-\\s*Inspection Date:", "\\r", F))
dt_re_inspection
pg1_split
# First Chunk
grep("food safety assessment categories", pg1_split, ignore.case = T)
# First Chunk
header_row <- grep("food safety assessment categories", pg1_split,
ignore.case = T) + 1
header_row
header_line <- pg1_split[header_row]
header_line
?regexpr
regexpr("D", header_line)
regexpr("S", header_line)
regexpr("NO", header_line)
regexpr("NA", header_line)
regexpr("V", header_line)
get_col_position <- function(str_srch) {
regexpr(str_srch, header_line)
}
get_col_position("D")
get_col_position <- function(str_srch) {
regexpr(str_srch, header_line, ignore.case = T)
}
get_col_position("med\\.")
get_col_position("low")
d_col <- get_col_position("d")
s_col <- get_col_position("s")
no_col <- get_col_position("no")
na_col <- get_col_position("na")
v_col <- get_col_position("v")
high_col <- get_col_position("high")
med_col <- get_col_position("med\\.")
low_col <- get_col_position("low")
pg1_split
header2_row <- grep("general sanitation", pg1_split,
ignore.case = T) + 1
header2_row
# First Chunk
get_col_position <- function(str_srch, header_line) {
regexpr(str_srch, header_line, ignore.case = T)
}
d_col <- get_col_position("d", header1_line)
s_col <- get_col_position("s", header1_line)
no_col <- get_col_position("no", header1_line)
na_col <- get_col_position("na", header1_line)
v_col <- get_col_position("v", header1_line)
high_col <- get_col_position("high", header1_line)
med_col <- get_col_position("med\\.", header1_line)
low_col <- get_col_position("low", header1_line)
header1_line <- pg1_split[header1_row]
header1_row <- grep("food safety assessment categories", pg1_split,
ignore.case = T) + 1
header1_line <- pg1_split[header1_row]
d_col <- get_col_position("d", header1_line)
s_col <- get_col_position("s", header1_line)
no_col <- get_col_position("no", header1_line)
na_col <- get_col_position("na", header1_line)
v_col <- get_col_position("v", header1_line)
high_col <- get_col_position("high", header1_line)
med_col <- get_col_position("med\\.", header1_line)
low_col <- get_col_position("low", header1_line)
pg1_split
s_col
line <- pg1_split[14]
line
substr(line, d_col, v_col)
v_col
d_col
substr(line, d_col, v_col)
assess_status
d_col <- regexpr("d", header1_line, ignore.case = T)
d_col
line <- pg1_split[14]
line
v_col <- regexpr("v", header1_line, ignore.case = T)
v_col
assess_status <- substr(line, d_col, v_col)
assess_status
substr(header1_line, 1, v_col - d_col)
header1_line
substr(header1_line, d_col, v_col)
assess_status_header <- substr(header1_line, d_col, v_col)
assess_status_header
regexpr("d", assess_status_header, ignore.case = T)
regexpr("v", assess_status_header, ignore.case = T)
nchar(assess_status_header)
s_col <- regexpr("s", assess_status_header, ignore.case = T)
s_col
no_col <- regexpr("no", assess_status_header, ignore.case = T)
na_col <- regexpr("na", assess_status_header, ignore.case = T)
v_col <- nchar(assess_status_header)
na_col
assess_status_header
line <- pg1_split[14]
line
d_col_orig <- regexpr("d", header1_line, ignore.case = T)
v_col_orig <- regexpr("v", header1_line, ignore.case = T)
assess_status_header <- substr(header1_line, d_col_orig, v_col_orig)
d_col <- 1
s_col <- regexpr("s", assess_status_header, ignore.case = T)
no_col <- regexpr("no", assess_status_header, ignore.case = T)
na_col <- regexpr("na", assess_status_header, ignore.case = T)
v_col <- nchar(assess_status_header)
line <- pg1_split[14]
assess_status <- substr(line, d_col_orig, v_col_orig)
assess_status
regexpr("x", assess_status)
s_col
pg1_split
line <- pg1_split[15]
assess_status <- substr(line, d_col_orig, v_col_orig)
assess_status
regexpr("x", assess_status)
no_col
na_col
pos <- regexpr("x", assess_status)
pos
